#include <ros/ros.h>
#include <moveit/move_group_interface/move_group_interface.h>

std::vector<std::vector<double>> head_sample_poses{
  {0.12723450247038656, 0.18137461586725076},
  {0.60590850312235134, 0.178233023213661},
  {1.2451178883727545, 0.17132151937576343},
  {1.2451178883727545, 0.17037904157968642},
  {1.2451178883727545, 0.16912240451825053},

  {1.8776252092954995, 0.12597786540895073},
  {1.7697638615222502, 0.50600585673819598},
  {0.49626691951206753, 0.19896753472735348},
  {0.49626691951206753, 0.19875809521711427},
  {0.63439227651489893, 0.65575510655930935},

  {0.040212385965949338, 1.0784040382222566},
  {0.36107371565258672, 1.0752624455686663},
  {-0.71178017554832751, 0.32368876307486838},
  {-0.39929642627126277, 0.22001620550640513},
  {0.22095868330248214, 0.20116664958486638},

  {0.38840557173881801, 0.4951150022057515},
  {0.38851029149393757, 0.49689523804278563},
  {0.50579641722795665, 0.21289526215826834},
  {0.13760175822723295, 0.50516809869723867},
  {-0.31625366046137254, 0.70067988150564364},

  {-0.81000730585056824, 0.58695422744569303},
  {0.8133583380143975, 0.62611941586044573},
  {0.13456488532876273, 0.74644241449293469},
  {-0.06852622686959943, 0.6587888001523265},
  {-0.09125041373056558, 1.088035076387812},

  {1.4103261549302357, 0.6351221354952835},
  {1.4243586021162704, 0.6350174157401639},
  {1.4229972452997146, 0.6348079762299245},
  {0.9256831282364505, 0.9590203380803911},
  {1.069253912505504, 0.05036702290710342},

  {-0.26615416764309024, 1.3157170524641657},
  {1.3124961407857807, 1.315612332709046},
  {1.4155403798235258, 1.315612332709046},
  {0.1273986129959246, 0.0853733261349584},
  {0.1273986129959246, 0.0853733261349584},

  {0.1273986129959246, 0.0853733261349584}
};

std::vector<std::vector<double>> l_arm_sample_poses{
  {0.036585595428704487, 0.20142051191170665, 0.4624237669213464, -0.74250218552437175, -0.41054077608812539, -1.0664423912426462, -4.6819917841317036},
  {0.47366928213473342, 0.21140271283803219, 0.40998773869839361, -0.7422126441016047, -0.41100355278372719, -1.0664423912426462, -4.6819917841317036},
  {1.2637693455468078, 0.22223086299540251, 0.3006257471141312, -0.7582821930651763, -0.41586270808757358, -1.0772761123474459, -4.6827314357733965},
  {1.3771855980911645, 0.49056595908273271, 0.21243059261069377, -1.5878183692927905, -0.48834510803662723, -0.22271741267131206, -4.2174035353082342},
  {1.3597752084461974, 0.30242685009842551, 0.68259094352720018, -1.9716055251705225, -1.7672863534265713, -1.0659202842014524, -2.9533823885748149},

  {1.2599556411483865, -0.05693238324929787, -0.13602044509106898, -1.9283190824668477, -1.6657647158283335, -1.0612213208306951, -2.5182061697386739},
  {1.3323331181010352, 0.58395875419005072, -0.58886247475962783, -1.3518421097376401, -1.0259759341551387, -1.0228464533028527, -4.0197860202158759},
  {0.26648564535962604, 0.43583304383415045, 0.33189493825625904, -1.4255304018318558, -1.1659080374885407, -0.93195631921479949, -3.0556718597289625},
  {0.29210379012293458, 0.57050816141644245, 0.32564110002783347, -1.4129353499414887, -1.2854201191283992, -0.78150247351040325, -4.0548977187362505},
  {0.41107478603020925, 0.92775252168655442, 0.36172093596105781, -1.0236469070311827, -0.72470830531661745, -0.88018070429628259, -4.0270520098725076},

  {0.4861052747382813, 1.0944045202023303, 0.56777688784636171, -1.5710249667723011, 1.5253698357993346, -1.6463292783300418, -6.300958701037608},
  {0.95817555396895826, 0.067422153714250393, 1.7003630264968681, -1.487347495592622, 0.81437129008999232, -1.312180771965155, -6.1699098336976324},
  {-0.26552611822015176, -0.14998679866419806, 1.080270912924518, -0.48090151005433707, 0.17568160306885489, -1.2901217494746622, -4.5944083279712196},
  {-0.27099795496571277, -0.11056556449752218, 0.96690005068100837, -0.46005452761510918, -0.44999248938840752, -1.2915140349178487, -4.5930160425280331},
  {-0.10991039744108939, -0.049488030016106091, 0.76613580806591086, -0.40229101377308146, -1.420897996766612, -1.4428380590242393, -4.5803984556991484},

  {0.084754340113113238, 0.10329040111053925, 0.63047562495698717, -0.34134254428061656, -2.1230459381725155, -1.9092101735717921, -4.069386189129415},
  {1.0692704212273194, 0.1898310074463963, 1.40194269462251, -1.4083026871772157, 0.2118938794999044, -0.2453420511231017, -4.5527702914359089},
  {0.60399848461991512, -0.0066829989252519912, 1.4428331753468309, -0.48075673934295382, -1.1029704068863362, -1.1435837065792287, -4.51591823611155},
  {0.63019697570472255, 0.40546346643965125, 1.2659618018608463, -2.0340017017768228, -1.449821540241897, -0.90045586106269537, -2.4225300544396657},
  {0.12861194069495877, 0.21512488945462829, 1.375003083792369, -1.0074325873562275, 0.18279679476377567, -0.80860853073244998, -5.2693622054762272},

  {-0.29039810342724742, 0.13780512973715667, 1.0143650792864947, -0.98528266851454782, 0.39798795821985727, -1.1213506484083346, -5.7472641838501719},
  {0.0054127073024777539, 0.61551266050801223, -0.33662433287979665, -1.6829327266717682, -1.1766097485743967, -1.5594854738112496, -3.2957105719184252},
  {0.23025545357462329, 0.44556145999116276, 0.30976597221721475, -0.50015601466834636, 1.3149799805601448, -1.5349464428750796, -5.5325041542385733},
  {0.13790894055239766, 0.286105285325533, 0.6795101031995241, -0.4526628028371863, 0.2714671126692796, -1.434914981897339, 1.6401126820781124},
  {0.21177873661747193, 0.44480536106949, 0.6848018124697305, -0.2792274905997201, 1.298715682737333, -1.7665399708964475, 0.7363453937693376},

  {1.7684333841122366, 0.5832872501914823, 0.031035185359704398, -1.9886800506164155, 0.1867211302867086, -0.29476373068746803, 1.1572071778927142},
  {1.4609327403351764, 0.4198498587536758, 0.5557161772419721, -1.9409057158598513, 0.23768441389015232, -0.2197543524357673, 1.2480538030606674},
  {1.9969240215480895, 0.4523343092257864, 0.6142456888669805, -1.487628618518026, -0.6545490552352933, -1.0412027639161092, 1.9355817584744581},
  {1.184522078066986, -0.27281337162559904, 1.246364414417072, -0.8743798850974027, 0.3954334200043303, -1.7663659352160495, 0.6750848342691088},
  {0.5422445134024172, -0.35470125719071116, 0.09710137382409756, -1.0371021646924878, 0.17723420802681605, -0.09527533203082778, 1.4487604514800962},

  {1.8201868560451682, 1.2706259624162501, 2.023261289497665, -1.6404967709180147, 0.14512648650963778, -0.08728887131369806, 1.2881384129953632},
  {1.8774753286388457, 0.6267740026682457, 2.006103323076087, -2.0435384314097558, -0.8155979335652711, -0.07867410513397799, 1.6295964179369806},
  {2.135563628471142, 0.6332878117472887, 1.8609822052113403, -2.0578707318367253, -0.22220251562642146, -0.08937729947847817, 1.5766895710958733},
  {-0.16670555978284451, -0.1983604223712903, 0.087958115525125, -1.2280612568693559, -0.02119432486429552, -0.1517043534368785, 2.6666651135454638},
  {-0.16239441568028123, -0.19303094221570963, 0.15418465881588794, -1.1720349915639308, -0.02119432486429552, -0.14382923889885146, 1.6299780743324288},

  {-0.1720944899110486, -0.18863200621427803, 0.20357394533781314, -1.1184698283520254, -0.02674764521154938, -0.18033322286241144, 0.3887991106512989}
};

int main(int argc, char** argv){
  ros::init(argc, argv, "samplePoses");

  ros::AsyncSpinner spinner(1);
  spinner.start();


  moveit::planning_interface::MoveGroupInterface left_arm("left_arm");
  left_arm.setMaxVelocityScalingFactor(.1);

  moveit::planning_interface::MoveGroupInterface head("head");
  head.setMaxVelocityScalingFactor(.1);

  // Wait to proceed
  std::cout << "--------------------------------------------------------------------------" << std::endl;
  std::cout << "Press <enter> to move to the initial pose with the right and the left arm.";
  std::string throwaway;
  std::getline(std::cin, throwaway);

  {
    moveit::planning_interface::MoveGroupInterface group("right_arm");
    group.setNamedTarget("right_arm_to_side");
    while(!group.move() && ros::ok());
  }
  left_arm.setJointValueTarget(l_arm_sample_poses[0]);
  while(!left_arm.move() && ros::ok());

  head.setJointValueTarget(head_sample_poses[0]);
  while(!head.move() && ros::ok());

  // Wait to proceed
  std::cout << "Please put the checkerboard in the left hand (open/close the gripper with the joystick's left/right D-Pad buttons). Press <enter> to move to the first pose.";
  std::getline(std::cin, throwaway);

  for (size_t i = 1; i < head_sample_poses.size(); ++i) {
    if(!ros::ok())
      return 0;

    ROS_INFO_STREAM("Pose: " << i << "/" << head_sample_poses.size()-1);
    left_arm.setJointValueTarget(l_arm_sample_poses[i]);
    left_arm.move();

    head.setJointValueTarget(head_sample_poses[i]);
    head.move();

    // Wait to proceed
    std::cout << "Press enter to continue...";
    std::getline(std::cin, throwaway);
 }

  return 0;
}
